@using ToDoList.Shared.Models
@using ToDoList.Client.Services.Assignments
@using ToDoList.Shared.Utils
@using ToDoList.Shared.Models.Responses
@using ToDoList.Shared.Enums
@using System.Security.Claims 

@inject IToastService ToastService
@inject IModalService ModalService
@inject IAssignmentService AssignmentService

<EditForm Model="@Assignment" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="titleInput">Title</label>
        <InputText type="text" class="form-control" id="titleInput" @bind-Value="@Assignment.Title" />
        <ValidationMessage For="@(() => Assignment.Title)" />
    </div>
    <div class="form-group">
        <label for="descrInput">Description</label>
        <InputText type="text" class="form-control" id="descrInput" @bind-Value="@Assignment.Description" />
        <ValidationMessage For="@(() => Assignment.Description)" />
    </div>
    <div class="form-group">
        <label for="effortInput">Effort</label>
        <InputNumber class="form-control" id="effortInput" @bind-Value="@Assignment.Effort" />
        <ValidationMessage For="@(() => Assignment.Effort)" />
    </div>
    <div class="form-group">
        <label for="statusSelect">Status</label>
        <InputSelect class="form-control" id="statusSelect" @bind-Value="@Assignment.Status">
            @foreach (var status in Enum.GetValues(typeof(AssignmentStatus)))
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Assignment.Status)" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
    <button @onclick="BlazoredModal.Cancel" class="btn btn-secondary">Cancel</button>

</EditForm>

@code {
    [Parameter]
    public Assignment Assignment { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private ClaimsPrincipal currentUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        currentUser = authState.User;
    }

    private async Task OnValidSubmit()
    {
        Assignment.UserId = Guid.Parse(currentUser.Claims.First(c => c.Type == "Id").Value);

        if (Assignment.Id == Guid.Empty)
        {
            var result = await AssignmentService.Create(Assignment);
            var responseObj = await JsonUtils.GetObjectFromHttpResponse<GenericResponseMessage>(result);
            if (responseObj.IsSuccessful)
            {
                BlazoredModal.Close(ModalResult.Ok<Assignment>(Assignment));
            }
            else
            {
                ToastService.ShowError(responseObj.Message);
            }
        }
        else
        {
            var result = await AssignmentService.Update(Assignment);
            var responseObj = await JsonUtils.GetObjectFromHttpResponse<GenericResponseMessage>(result);
            if (responseObj.IsSuccessful)
            {
                BlazoredModal.Close(ModalResult.Ok<Assignment>(Assignment));
            }
            else
            {
                ToastService.ShowError(responseObj.Message);
            }
        }
    }
}
