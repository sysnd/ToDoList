@using ToDoList.Shared.Models
@using ToDoList.Client.Components.Common
@using ToDoList.Shared.Utils
@using ToDoList.Shared.Models.Responses

@inject HttpClient Http
@inject IModalService Modal
@inject IToastService ToastService

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Is Admin</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (users.Count > 0)
            {
                @foreach (var u in users)
                {
                    <tr>
                        <td>@u.Username</td>
                        <td>@u.Email</td>
                        <td>@u.FirstName </td>
                        <td>@u.LastName</td>
                        <td>@u.IsAdmin</td>
                        <td><button type="button" class="btn btn-primary" @onclick="@(() => EditUser(u))"><i class="fas fa-edit"></i></button></td>
                        <td><button type="button" class="btn btn-primary" @onclick="@(()=> DeleteUser(u))"><i class="fas fa-trash"></i></button></td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="textAlignCenter">No Records Found</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<User> users;

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<User>>("user");
    }

    private void EditUser(User user)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(UpsertUserForm.User), user);
        Modal.Show<UpsertUserForm>("Edit User", parameters);
    }

    private async Task DeleteUser(User user)
    {
        var options = new ModalOptions()
        {
            Class = "blazored-modal delete-modal"
        };
        var modalRef = Modal.Show<DeleteModal>("Are you sure?", options);
        var modalResult = await modalRef.Result;
        if (!modalResult.Cancelled)
        {
            var result = await Http.DeleteAsync($"user/{user.Id}");
            var responseObj = await JsonUtils.GetObjectFromHttpResponse<GenericResponseMessage>(result);
            if (responseObj.IsSuccessful)
            {
                ToastService.ShowSuccess(responseObj.Message);
                this.StateHasChanged();
            }
            else
            {
                ToastService.ShowError(responseObj.Message);
            }
        }
    }
}
