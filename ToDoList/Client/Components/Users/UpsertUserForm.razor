@using ToDoList.Shared.Models

@inject IModalService ModalService

@inject HttpClient Http

<EditForm Model="@User" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="usernameInput">Username</label>
        <InputText type="text" class="form-control" id="usernameInput" @bind-Value="@User.Username" />
        <ValidationMessage For="@(() => User.Username)" />
    </div>
    <div class="form-group">
        <label for="emailInput">Email</label>
        <InputText type="email" class="form-control" id="emailInput" @bind-Value="@User.Email" />
        <ValidationMessage For="@(() => User.Email)" />
    </div>
    <div class="form-group">
        <label for="passwordInput">Password</label>
        <InputText type="password" class="form-control" id="passwordInput" @bind-Value="@User.Password" />
        <ValidationMessage For="@(() => User.Password)" />
    </div>
    <div class="form-group">
        <label for="firstNameInput">First Name</label>
        <InputText type="text" class="form-control" id="firstNameInput" @bind-Value="User.FirstName" />
        <ValidationMessage For="@(() => User.FirstName)" />
    </div>
    <div class="form-group">
        <label for="lastNameInput">Last Name</label>
        <InputText type="text" class="form-control" id="lastNameInput" @bind-Value="@User.LastName" />
        <ValidationMessage For="@(() => User.LastName)" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
    <button @onclick="BlazoredModal.Cancel" class="btn btn-secondary">Cancel</button>

</EditForm>

@code {
    [Parameter]
    public User User { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    private async Task OnValidSubmit()
    {
        await Http.PostAsJsonAsync<User>("auth/signup", User);
        BlazoredModal.Close(ModalResult.Ok<User>(User));
    }
}
