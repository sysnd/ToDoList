@using ToDoList.Shared.Models
@using ToDoList.Shared.Utils
@using ToDoList.Shared.Models.Responses
@using ToDoList.Client.Services.Users

@inject IModalService ModalService
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject IUserService UserService

<EditForm Model="@User" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="usernameInput">Username</label>
        <InputText type="text" class="form-control" id="usernameInput" @bind-Value="@User.Username" disabled=@isDisabled />
        <ValidationMessage For="@(() => User.Username)" />
    </div>
    <div class="form-group">
        <label for="emailInput">Email</label>
        <InputText type="email" class="form-control" id="emailInput" @bind-Value="@User.Email" />
        <ValidationMessage For="@(() => User.Email)" />
    </div>
    <div class="form-group @passwordClass">
        <label for="passwordInput">Password</label>
        <InputText type="password" class="form-control" id="passwordInput" @bind-Value="@User.Password" />
        <ValidationMessage For="@(() => User.Password)" />
    </div>
    <div class="form-group">
        <label for="firstNameInput">First Name</label>
        <InputText type="text" class="form-control" id="firstNameInput" @bind-Value="User.FirstName" />
        <ValidationMessage For="@(() => User.FirstName)" />
    </div>
    <div class="form-group">
        <label for="lastNameInput">Last Name</label>
        <InputText type="text" class="form-control" id="lastNameInput" @bind-Value="@User.LastName" />
        <ValidationMessage For="@(() => User.LastName)" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
    <button @onclick="BlazoredModal.Cancel" class="btn btn-secondary">Cancel</button>

</EditForm>

@code {
    [Parameter]
    public User User { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }


    private string passwordClass;
    private bool isDisabled;

    protected override void OnInitialized()
    {
        if (User.Id != Guid.Empty)
        {
            passwordClass = "displayNone";
            isDisabled = true;
        }
    }

    private async Task OnValidSubmit()
    {
        if (User.Id == Guid.Empty)
        {
            var result = await UserService.Register(User);
            var responseObj = await JsonUtils.GetObjectFromHttpResponse<GenericResponseMessage>(result);
            if (responseObj.IsSuccessful)
            {
                BlazoredModal.Close(ModalResult.Ok<User>(User));
            }
            else
            {
                ToastService.ShowError(responseObj.Message);
            }
        }
        else
        {
            var result = await UserService.Update(User);
            var responseObj = await JsonUtils.GetObjectFromHttpResponse<GenericResponseMessage>(result);
            if (responseObj.IsSuccessful)
            {
                BlazoredModal.Close(ModalResult.Ok<User>(User));
            }
            else
            {
                ToastService.ShowError(responseObj.Message);
            }
        }
    }
}
